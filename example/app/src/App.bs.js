// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Debouncer = require("re-debouncer/src/Debouncer.bs.js");
var ReactUpdate = require("reason-react-update/src/ReactUpdate.bs.js");
var Option$Rationale = require("rationale/src/Option.js");
var Api$ReactHooksTemplate = require("./Api.bs.js");

function searchModeToFetcher(param) {
  if (param) {
    return Api$ReactHooksTemplate.searchById;
  } else {
    return Api$ReactHooksTemplate.searchByName;
  }
}

function valFromEvent(e) {
  return e.target.value;
}

var debounceSearch = Debouncer.make(500, (function (dispatcher) {
        return Curry._1(dispatcher, /* () */0);
      }));

function App(Props) {
  var match = ReactUpdate.useReducer(/* record */[
        /* searchText */"",
        /* searchMode : ByName */0,
        /* searchResult */undefined
      ], (function (action, state) {
          if (typeof action === "number") {
            return /* SideEffects */Block.__(2, [(function (self) {
                          var searchText = state[/* searchText */0];
                          (
                              state[/* searchMode */1] ? Api$ReactHooksTemplate.searchById : Api$ReactHooksTemplate.searchByName
                            )(searchText, (function (fetchResult) {
                                  Curry._1(self[/* send */0], /* UpdateMovieFetchStatus */Block.__(1, [
                                          fetchResult,
                                          searchText
                                        ]));
                                  return /* () */0;
                                }));
                          return undefined;
                        })]);
          } else if (action.tag) {
            if (action[1] === state[/* searchText */0]) {
              return /* Update */Block.__(0, [/* record */[
                          /* searchText */state[/* searchText */0],
                          /* searchMode */state[/* searchMode */1],
                          /* searchResult */action[0]
                        ]]);
            } else {
              return /* NoUpdate */0;
            }
          } else {
            return /* UpdateWithSideEffects */Block.__(1, [
                      /* record */[
                        /* searchText */action[0],
                        /* searchMode */state[/* searchMode */1],
                        /* searchResult */state[/* searchResult */2]
                      ],
                      (function (self) {
                          Curry._1(debounceSearch, (function (param) {
                                  return Curry._1(self[/* send */0], /* RequestMovie */0);
                                }));
                          return undefined;
                        })
                    ]);
          }
        }));
  var dispatch = match[1];
  var state = match[0];
  var __x = state[/* searchResult */2];
  var __x$1 = Option$Rationale.map((function (fetcher) {
          if (typeof fetcher === "number") {
            return "Loading...";
          } else if (fetcher.tag) {
            var e = fetcher[0];
            if (e.tag) {
              console.error(e);
              return "Unexpected error, are you connected to the internet?";
            } else {
              return "Error:" + e[0][/* error */0];
            }
          } else {
            var match = fetcher[0];
            if (match.tag) {
              return "Error" + match[0][/* error */0];
            } else {
              return "Found " + match[0][/* title */0];
            }
          }
        }), __x);
  return React.createElement("div", undefined, React.createElement("h1", undefined, "Movie Searcher"), React.createElement("input", {
                  value: state[/* searchText */0],
                  onChange: (function (e) {
                      return Curry._1(dispatch, /* UpdateSearchText */Block.__(0, [e.target.value]));
                    })
                }), Option$Rationale.$$default(null, __x$1));
}

var make = App;

exports.searchModeToFetcher = searchModeToFetcher;
exports.valFromEvent = valFromEvent;
exports.debounceSearch = debounceSearch;
exports.make = make;
/* debounceSearch Not a pure module */
