// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Option$Rationale = require("rationale/src/Option.js");

var Deserialiser = /* module */[];

var Body = /* module */[];

function makeFetch(url, $staropt$star, $staropt$star$1, defaultHeaders, param) {
  var method__ = $staropt$star !== undefined ? $staropt$star : /* Get */0;
  var body = $staropt$star$1 !== undefined ? Caml_option.valFromOption($staropt$star$1) : undefined;
  var partial_arg = Caml_option.some(Curry._1(defaultHeaders, /* () */0));
  var partial_arg$1 = method__;
  var partial_arg$2 = Fetch.RequestInit[/* make */0];
  var baseRequestInit = function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
    return partial_arg$2(partial_arg$1, partial_arg, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8);
  };
  var withBody = Option$Rationale.map((function (b) {
          switch (b.tag | 0) {
            case 0 : 
                return Curry._1(baseRequestInit, Caml_option.some(JSON.stringify(b[0])));
            case 1 : 
            case 2 : 
                return Curry._1(baseRequestInit, Caml_option.some(b[0]));
            
          }
        }), body);
  if (withBody !== undefined) {
    return fetch(url, Curry.app(withBody, [
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    /* () */0
                  ]));
  } else {
    return fetch(url, Curry.app(baseRequestInit, [
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    /* () */0
                  ]));
  }
}

function makeUrl(baseUrl, url) {
  return Option$Rationale.$$default("", baseUrl) + url;
}

var Private = /* module */[
  /* makeFetch */makeFetch,
  /* makeUrl */makeUrl
];

function makeFetcher(url, deserialiser, errorDeserialiser, $staropt$star, subscribe, $staropt$star$1, $staropt$star$2, defaultHeaders, param) {
  var method__ = $staropt$star !== undefined ? $staropt$star : /* Get */0;
  var body = $staropt$star$1 !== undefined ? Caml_option.valFromOption($staropt$star$1) : undefined;
  var baseUrl = $staropt$star$2 !== undefined ? Caml_option.valFromOption($staropt$star$2) : undefined;
  Curry._1(subscribe, /* Pending */0);
  makeFetch(makeUrl(baseUrl, url), method__, Caml_option.some(body), defaultHeaders, /* () */0).then((function (res) {
              if (res.ok) {
                switch (deserialiser.tag | 0) {
                  case 0 : 
                      return Promise.resolve(/* Fulfilled */Block.__(0, [Curry._1(deserialiser[0], res)]));
                  case 1 : 
                      var f = deserialiser[0];
                      return res.json().then((function (js) {
                                    return Promise.resolve(/* Fulfilled */Block.__(0, [Curry._1(f, js)]));
                                  }));
                  case 2 : 
                      var f$1 = deserialiser[0];
                      return res.text().then((function (t) {
                                    return Promise.resolve(/* Fulfilled */Block.__(0, [Curry._1(f$1, t)]));
                                  }));
                  
                }
              } else {
                switch (errorDeserialiser.tag | 0) {
                  case 0 : 
                      return Promise.resolve(/* Error */Block.__(1, [/* DeserialisedError */Block.__(0, [Curry._1(errorDeserialiser[0], res)])]));
                  case 1 : 
                      var f$2 = errorDeserialiser[0];
                      return res.json().then((function (js) {
                                    return Promise.resolve(/* Error */Block.__(1, [/* DeserialisedError */Block.__(0, [Curry._1(f$2, js)])]));
                                  }));
                  case 2 : 
                      var f$3 = errorDeserialiser[0];
                      return res.text().then((function (t) {
                                    return Promise.resolve(/* Error */Block.__(1, [/* DeserialisedError */Block.__(0, [Curry._1(f$3, t)])]));
                                  }));
                  
                }
              }
            })).catch((function (err) {
            return Promise.resolve(/* Error */Block.__(1, [/* Other */Block.__(1, [err])]));
          })).then((function (res) {
          Curry._1(subscribe, res);
          return Promise.resolve(res);
        }));
  return /* () */0;
}

function isPending(param) {
  if (typeof param === "number") {
    return true;
  } else {
    return false;
  }
}

exports.Deserialiser = Deserialiser;
exports.Body = Body;
exports.Private = Private;
exports.makeFetcher = makeFetcher;
exports.isPending = isPending;
/* Option-Rationale Not a pure module */
